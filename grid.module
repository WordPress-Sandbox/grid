<?php 
require_once("core/classes/bootstrap.php");

//drupal-specific boxes
require_once("core/classes/grid_block_box.php");
require_once("core/classes/grid_node_box.php");
require_once("core/classes/grid_image_box.php");

class grid_drupal_ajaxendpoint extends grid_ajaxendpoint
{
	public function Rights()
	{
		$rights=parent::Rights();
		$results=array();
		foreach($rights as $right)
		{
			if(user_access("grid: ".$right))
			{
				$results[]=$right;
			}
		}
		return $results;
	}
}

function grid_permission() {
	$storage=grid_get_storage();
	$rights=$storage->ajaxEndpoint->Rights();
	$results=array();
	foreach($rights as $right)
	{
		$results["grid: ".$right]=array(
			'title'=>"grid: ".$right,
		);
	}
	$results["administer grid"]=array(
		'title'=>'administer grid',
	);
	return $results;
}

function grid_menu() {
	return array(
		'node/%node/grid' => array(
			'title'=>t('Grid'),
			'page callback'=>'grid_grid',
			'access arguments'=>array(1,'administer grid'),
			'access callback'=>'grid_access',
			'type'=>MENU_LOCAL_TASK,
			'context'=>MENU_CONTEXT_PAGE|MENU_CONTEXT_INLINE,
			'page arguments'=>array(1),
		),
		'grid/ckeditor_config.js' =>array(
			'title'=>t('Grid CKEditor Config JS File'),
			'page callback'=>'grid_ckeditor_config',
			'access callback'=>'user_access',
			'acces arguments'=>array('administer grid'),
			'type'=>MENU_CALLBACK,
		),
		'node/%node/grid/preview' =>array(
			'title'=>t('Preview'),
			'page callback'=>'grid_preview',
			'access arguments'=>array(1,'administer grid'),
			'access callback'=>'grid_access',
			'type'=>MENU_CALLBACK,
			'page arguments'=>array(1),
		),
		'admin/config/grid'=>array(
			'title'=>'Grid settings',
			'description'=>'Configure Grid',
			'page callback'=>'drupal_get_form',
			'page arguments'=>array('grid_admin_settings'),
			'access arguments'=>array('administer grid'),
			'type'=>MENU_NORMAL_ITEM,
		),
		'grid_ajax_endpoint'=>array(
			'title'=>'Grid AJAX Endpoint',
			'page callback'=>'grid_ajax',
			'access callback'=>TRUE,//TODO
			'type'=>MENU_CALLBACK,
		),
		'grid_file_endpoint'=>array(
			'title'=>'Grid file upload Endpoint',
			'page callback'=>'grid_fileupload',
			'access callback'=>TRUE,
			'type'=>MENU_CALLBACK,
		),
	);
}

function grid_js_alter(&$javascript)
{
	$item=menu_get_item();
	if($item['page_callback']=='grid_grid')
	{
		$javascript['misc/jquery.js']['data']=drupal_get_path('module','grid').'/js/jquery-1.8.3.min.js';
		unset($javascript['misc/ui/jquery.ui.core.min.js']);
		unset($javascript['misc/ui/jquery.ui.draggable.min.js']);
		unset($javascript['misc/ui/jquery.ui.droppable.min.js']);
		unset($javascript['misc/ui/jquery.ui.mouse.min.js']);
		unset($javascript['misc/ui/jquery.ui.sortable.min.js']);
		unset($javascript['misc/ui/jquery.ui.widget.min.js']);
	}
}

function grid_admin_paths() 
{
	return array(
		'node/*/grid'=>TRUE
	);
}

function grid_theme()
{
	return array(
		'grid_htmlbox_ckeditor_config_js'=>array(
			'variables'=>array('styles'=>array(),'formats'=>array()),
			'template'=>'grid_htmlbox_ckeditor_config_js',
		),
	);

}

function grid_ckeditor_config()
{
	$styles=array();
	$formats=array();
	$formats_input=module_invoke_all("grid_formats");
	$styles_input=module_invoke_all("grid_styles");
	foreach($formats_input as $format)
	{
		if(!in_array($format, $formats))
		{
			$formats[]=$format;
		}
	}
	$styles=$styles_input;
	echo theme('grid_htmlbox_ckeditor_config_js',array('styles'=>$styles,'formats'=>$formats));
}

function grid_access($node,$right)
{
	$type=$node->type;
	$enabled=variable_get("grid_".$type."_enabled",0);
	if($enabled==0)return FALSE;
	return user_access($right);
}

function grid_get_grid_by_nid($nodeid)
{
	$grid_id=db_select("grid_nodes")->fields("grid_nodes",array("grid_id"))->condition("nid",$nodeid)->execute()->fetchAssoc();
	if($grid_id===FALSE)
	{
		return FALSE;
	}
	else
	{
		return $grid_id['grid_id'];
	}
}

function grid_get_storage()
{
	$loaded=&drupal_static(__FUNCTION__);
	if(!isset($loaded))
	{
		module_invoke_all('grid_load_classes');
		$loaded=TRUE;
	}
	$conn=Database::getConnection();
	$opts=$conn->getConnectionOptions();
	$storage=new grid_db($opts['host'],$opts['username'],$opts['password'],$opts['database']);
	global $theme_path;
	$storage->templatesPath=$theme_path.'/grid/';
	$storage->ajaxEndpoint=new grid_drupal_ajaxendpoint();
	$storage->ajaxEndpoint->storage=$storage;
	return $storage;
}

function grid_grid($node) {
	$type=$node->type;
	$enabled=variable_get("grid_".$type."_enabled",0);
	if($enabled==1)
	{
		$grid_id=grid_get_grid_by_nid($node->nid);
		if($grid_id===FALSE)
		{
			return drupal_get_form('grid_build_grid',$node->nid);
		}
		else
		{
//			$grid_id=$grid_id["grid_id"];
			$base=drupal_get_path('module','grid');
			drupal_add_js("document.ID=".$grid_id,'inline');
			drupal_add_js("document.PathToConfig='/grid/ckeditor_config.js';",'inline');
			drupal_add_js($base.'/js/jquery-ui-1.10.2.custom.js','file');
			drupal_add_js($base.'/js/jquery.tmpl.min.js','file');
			drupal_add_js($base.'/js/ckeditor/ckeditor.js','file');
			drupal_add_js($base.'/js/templates.js','file');
			drupal_add_js($base.'/js/jquery.iframe-transport.js');
			drupal_add_js($base.'/js/jquery.fileupload.js');
			drupal_add_js($base.'/js/grid2.0.js','file');
//			drupal_add_css($base.'/core/templates/reset.css',array('type'=>'file'));
			drupal_add_css($base.'/core/templates/main.css',array('type'=>'file','group'=>CSS_THEME));
			$input=file_get_contents($base.'/core/templates/editor.html');
			return $input;
		}
	}
	else
	{
		drupal_not_found();
	}
}

function grid_preview($node) {
	$type=$node->type;
	$enabled=variable_get("grid_".$type."_enabled",0);
	if($enabled==1)
	{
		$grid_id=grid_get_grid_by_nid($node->nid);
		if($grid_id===FALSE)
		{
			drupal_not_found();
		}
		else
		{
			$storage=grid_get_storage();
			$grid=$storage->loadGrid($grid_id);
			return $grid->render(FALSE);
		}
	}
}

function grid_node_delete($node)
{
	$grid_id=grid_get_grid_by_nid($node->nid);
	if($grid_id!==FALSE)
	{
		$storage=grid_get_storage();
		$storage->destroyGrid($grid_id);
		db_delete("grid_nodes")->condition("nid",$node->nid)->execute();
	}
}

function grid_node_load($nodes,$types)
{
	$storage=NULL;
	foreach($nodes as $nid=>$node)
	{
		$grid_id=grid_get_grid_by_nid($nid);
		if($grid_id!==FALSE)
		{
			if($storage==NULL)
				$storage=grid_get_storage();
			$grid=$storage->loadGrid($grid_id,FALSE);
			if(!$grid->isDraft)
			{
				$node->grid=$grid;
			}
		}
	}
}

function grid_node_view($node,$view_mode,$langcode)
{
	if(isset($node->grid) && $view_mode=="full")
	{
		global $theme_path;
		$storage=$node->grid->storage;
		$storage->templatesPath=$theme_path.'/grid/';
		$html=$node->grid->render(FALSE);
		$node->content['grid']=array(
			'#type'=>'markup',
			'#markup'=>$html,
		);
		return $node;
	}
}

function grid_field_extra_fields()
{
	$array=array();
	$array['node']=array();
	$types=node_type_get_types();
	$keys=array_keys($types);
	foreach($keys as $nodetype)
	{
		if(variable_get("grid_".$nodetype."_enabled",0))
		{
			$array['node'][$nodetype]['display']['grid']=array(
				'label'=>t("Grid"),
				'weight'=>1,
				'description'=>t("Renders the Grid associated to a node")
			);
		}
	}
	return $array;
}

function grid_build_grid($form_id,&$form_state,$nid)
{
	$form=array();
	$form['question']=array(
		'#type'=>'markup',
		'#markup'=>'<div>'.t('There is no Grid. Boot one?').'</div>',
	);
	$form['submit']=array(
		'#type'=>'submit',
		'#value'=>'Create Grid',
		'#executes_submit_callback'=>TRUE,
	);
	$form_state['nid']=$nid;
	return $form;
}

function grid_build_grid_submit($form_id,&$form_state)
{
	$storage=grid_get_storage();
	$id=$storage->createGrid();
	db_insert('grid_nodes')->fields(array('nid','grid_id'))->values(array('nid'=>$form_state['nid'],'grid_id'=>$id))->execute();
}

function grid_ajax()
{
	$storage=grid_get_storage();
	$storage->handleAjaxCall();
}

function grid_fileupload()
{
	$storage=grid_get_storage();
	$result=$storage->handleUpload();
	drupal_json_output(array('result'=>$result));
}

function grid_admin_settings()
{
	$form=array();
	$types=node_type_get_types();
	$keys=array_keys($types);
	$form['nodetypes']=array(
		'#type'=>'fieldset',
		'#title'=>t('Grid support for the following node types'),
	);
	
	foreach($keys as $key)
	{
		$form['nodetypes']['grid_'.$key.'_enabled']=array(
			'#type'=>'checkbox',
			'#default_value'=>variable_get('grid_'.$key.'_enabled',0),
			'#title'=>$key,
		);
	}
	
	$form['displays']=array(
		'#type'=>'fieldset',
		'#title'=>t('Supported Displays for nodes within grid'),
	);
	$info=entity_get_info('node');
	$view_modes=$info['view modes'];
	foreach($view_modes as $key=>$viewmode)
	{
		$form['displays']["grid_viewmode_$key"]=array(
			'#type'=>'checkbox',
			'#default_value'=>variable_get("grid_viewmode_$key",1),
			'#title'=>$viewmode['label'],
		);
	}
	
	$options=array();
	foreach($view_modes as $key=>$viewmode)
	{
		$options[$key]=$viewmode['label'];
	}
	
	$form['grid_default_viewmode']=array(
		'#type'=>'select',
		'#title'=>'Default View Mode',
		'#options'=>$options,
		'#default_value'=>variable_get('grid_default_viewmode','teaser'),
	);
	
	$form['blocks']=array(
		'#type'=>'fieldset',
		'#title'=>t('Supported Blocks'),
	);
	$blocks=array();
	$results=array();
	foreach(module_implements('block_info') as $module)
	{
		$module_blocks=module_invoke($module,'block_info');
		$blocks[$module]=$module_blocks;
	}
	drupal_alter('block_info',$blocks,$theme_key,$blocks);
	foreach($blocks as $module=>$modblocks)
	{
		foreach($modblocks as $delta=>$block)
		{
			$form['blocks']['grid_block_'.$module.'_'.$delta.'_enabled']=array(
				'#type'=>'checkbox',
				'#default_value'=>variable_get("grid_block_".$module."_".$delta."_enabled",0),
				'#title'=>$block['info'],
			);
		}
	}
	
	return system_settings_form($form);
}

function grid_viewmodes()
{
	$results=array();
	$info=entity_get_info('node');
	$view_modes=$info['view modes'];
	foreach($view_modes as $key=>$info)
	{
		if(variable_get("grid_viewmode_$key",1)==1)
		{
			$results[$key]=$info;
		}
	}
	return $results;
}

function grid_default_viewmode()
{
	return variable_get('grid_default_viewmode','teaser');
}
